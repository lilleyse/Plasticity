#version 420

layout(triangles, equal_spacing, ccw) in;

out gl_PerVertex
{
	vec4 gl_Position;
};

out Vertex
{
	vec3 vertexNormal;
	vec3 cameraSpacePosition;
	vec2 texcoord;
} vertexOut;


layout(binding = 0) uniform Projection
{
	mat4 projectionMatrix;
};

struct ModelViewStruct
{
	mat4 normalMatrix;
	mat4 matrix;
};

layout(binding = 1) uniform ModelView
{
	ModelViewStruct modelView;
};

struct OutputPatch
{
    vec3 B030;
    vec3 B021;
    vec3 B012;
    vec3 B003;
    vec3 B102;
    vec3 B201;
    vec3 B300;
    vec3 B210;
    vec3 B120;
    vec3 B111;
    vec3 modelSpaceNormal[3];
    vec2 texcoord[3];
};

in patch OutputPatch outPatch;


vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	 return gl_TessCoord.x * v0 + gl_TessCoord.y *v1 + gl_TessCoord.z * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	 return gl_TessCoord.x * v0 + gl_TessCoord.y * v1 + gl_TessCoord.z * v2;
}



void main()
{
	vec3 interpNormal = interpolate3D(outPatch.modelSpaceNormal[0], outPatch.modelSpaceNormal[1], outPatch.modelSpaceNormal[2]);
	vec2 interpTexcoord = interpolate2D(outPatch.texcoord[0], outPatch.texcoord[1], outPatch.texcoord[2]);

	//find the right position
	float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;

    float uPow3 = pow(u, 3);
    float vPow3 = pow(v, 3);
    float wPow3 = pow(w, 3);
    float uPow2 = pow(u, 2);
    float vPow2 = pow(v, 2);
    float wPow2 = pow(w, 2);

    vec3 interpPosition = outPatch.B300 * wPow3 +
						  outPatch.B030 * uPow3 +
						  outPatch.B003 * vPow3 +
						  outPatch.B210 * 3.0 * wPow2 * u +
						  outPatch.B120 * 3.0 * w * uPow2 +
						  outPatch.B201 * 3.0 * wPow2 * v +
						  outPatch.B021 * 3.0 * uPow2 * v +
						  outPatch.B102 * 3.0 * w * vPow2 +
						  outPatch.B012 * 3.0 * u * vPow2 +
						  outPatch.B111 * 6.0 * w * u * v;


	vec4 tempCamPosition = (modelView.matrix * vec4(interpPosition, 1.0));
	gl_Position = projectionMatrix * tempCamPosition;

	vertexOut.vertexNormal = normalize(mat3(modelView.normalMatrix) * interpNormal);
	vertexOut.cameraSpacePosition = vec3(tempCamPosition);
	vertexOut.texcoord = interpTexcoord;
}